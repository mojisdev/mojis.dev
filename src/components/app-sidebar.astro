---
import { Icon } from "astro-icon/components";
import { shortSha, sha, repositoryUrl } from "virtual:build-meta/git";
import { API_URL } from "astro:env/client";

interface NavigationItem {
  name: string;
  icon?: string;
  href?: string;
  expandable?: boolean;
  items?: NavigationItem[];
}

interface NavigationSection {
  title: string;
  items: NavigationItem[];
}

// Main navigation sections
const mainSections: NavigationSection[] = [
  {
    title: "Overview",
    items: [
      {
        icon: "lucide:home",
        name: "Getting Started",
        href: "/",
      },
      {
        name: "Categories",
        href: "/categories",
        expandable: true,
        items: [],
      },
    ]
  },
  {
    title: "Tools",
    items: [
      {
        name: "Lucky?",
        icon: "lucide:clover",
        href: API_URL + "/lucky",
      },
      {
        icon: "lucide:package",
        name: "API Reference",
        href: API_URL + "/scalar",
      },
    ]
  }
];

// Resources section (will be positioned at bottom)
const resourcesSection: NavigationSection = {
  title: "Resources",
  items: [
    {
      icon: "lucide:book-open",
      name: "Documentation",
      href: "#",
    },
    {
      icon: "lucide:github",
      name: "GitHub",
      href: repositoryUrl,
    },
  ]
};
---

<!-- Sidebar backdrop overlay (mobile only) -->
<div id="sidebar-backdrop" class="fixed inset-0 bg-black/50 z-40 hidden md:hidden transition-opacity duration-300 opacity-0"></div>

<aside
  id="sidebar"
  class="bg-sidebar text-sidebar-foreground flex h-full flex-col transition-all duration-300 ease-in-out w-64 fixed md:relative z-50 shadow-lg md:shadow-none left-0 top-0 transform md:translate-x-0"
>
  <div class="p-2 pb-2">
    <div class="flex items-center gap-2 py-2">
      <div class="size-8 bg-sidebar-primary rounded-md flex items-center justify-center text-sidebar-primary-foreground shrink-0">
        <Icon name="lucide:smile" class="size-5" />
      </div>
      <div class="transition-opacity duration-300 ease-in-out flex flex-col" id="sidebar-title">
        <h2 class="font-semibold text-sidebar-foreground leading-tight">Mojis</h2>
        <a href={repositoryUrl + "/tree/" + sha} target="_blank" class="text-xs text-sidebar-foreground/60 inline-flex items-center -mt-0.5">
          <Icon name="lucide:git-branch" class="w-3 h-3 mr-1" />
          {shortSha}
        </a>
      </div>
      <!-- Close button (mobile only) -->
      <button id="close-sidebar" class="ml-auto p-1 rounded-md hover:bg-sidebar-accent/20 text-sidebar-foreground/60 hover:text-sidebar-foreground md:hidden">
        <Icon name="lucide:x" class="w-5 h-5" />
      </button>
    </div>

    <div class="mt-4 relative transition-opacity duration-300 ease-in-out" id="sidebar-search">
      <div class="absolute inset-y-0 left-3 flex items-center pointer-events-none">
        <Icon name="lucide:search" class="w-4 h-4 text-sidebar-foreground/50" />
      </div>
      <input
        type="search"
        placeholder="Search the docs..."
        class="w-full bg-sidebar-accent/30 text-sidebar-foreground rounded-md pl-10 pr-3 py-2 text-sm border-none focus:outline-none focus:ring-1 focus:ring-sidebar-primary placeholder:text-sidebar-foreground/40"
      />
    </div>
  </div>

  <!-- Main navigation sections -->
  <nav class="flex-1 p-4 pt-0 overflow-y-auto scrollbar-thin scrollbar-thumb-sidebar-border scrollbar-track-transparent flex flex-col">
    <!-- Main sections container -->
    <div class="flex-1">
      {
        mainSections.map((section, index) => (
          <div class={`sidebar-section ${index > 0 ? "mt-6" : ""}`}>
            <h3 class="text-xs uppercase font-medium text-sidebar-foreground/50 px-2 mb-2 transition-opacity duration-300 ease-in-out sidebar-title">{section.title}</h3>
            <div class="space-y-1">
              {section.items.map((item) => (
                <div class="py-1">
                  <div
                    class={`flex items-center justify-between rounded-md hover:bg-sidebar-accent/20 transition-colors duration-200 ${item.expandable ? "cursor-pointer" : ""}`}
                    data-expandable={item.expandable}
                  >
                    <a href={item.href} class="flex-1 text-sidebar-foreground/80 hover:text-sidebar-foreground py-2 px-2 truncate transition-colors duration-200 flex items-center">
                      {item.icon && <Icon name={item.icon} class="w-5 h-5 mr-3 inline-block flex-shrink-0" />}
                      <span class="transition-opacity duration-300 ease-in-out sidebar-text">{item.name}</span>
                    </a>
                    {item.expandable && (
                      <button class="w-6 h-6 items-center justify-center text-sidebar-foreground/60 hover:text-sidebar-foreground transition-colors duration-200 sidebar-toggle">
                        <span class={`transform transition-transform duration-200 ${item.expanded ? "rotate-0" : "rotate-0"}`}>{item.expanded ? "âˆ’" : "+"}</span>
                      </button>
                    )}
                  </div>

                  {item.items && (
                    <div class={`ml-3 pl-3 border-l border-sidebar-border mt-1 space-y-1 transition-all duration-200 ${!item.expanded && "hidden"} sidebar-submenu`}>
                      {item.items.map((subItem) => (
                        <a href={subItem.href} class="block py-2 px-2 text-sidebar-foreground/60 hover:text-sidebar-foreground hover:bg-sidebar-accent/20 rounded-md transition-colors duration-200 truncate">
                          <span class="transition-opacity duration-300 ease-in-out sidebar-text">{subItem.name}</span>
                        </a>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))
      }
    </div>

    <!-- Resources section at bottom -->
    <div class="mt-auto pt-6 border-t border-sidebar-border/30">
      <h3 class="text-xs uppercase font-medium text-sidebar-foreground/50 px-2 mb-2 transition-opacity duration-300 ease-in-out sidebar-title">{resourcesSection.title}</h3>
      <div class="space-y-1">
        {resourcesSection.items.map((item) => (
          <div class="py-1">
            <div class="flex items-center justify-between rounded-md hover:bg-sidebar-accent/20 transition-colors duration-200">
              <a href={item.href} class="flex-1 text-sidebar-foreground/80 hover:text-sidebar-foreground py-2 px-2 truncate transition-colors duration-200 flex items-center">
                {item.icon && <Icon name={item.icon} class="w-5 h-5 mr-3 inline-block flex-shrink-0" />}
                <span class="transition-opacity duration-300 ease-in-out sidebar-text">{item.name}</span>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  </nav>
</aside>

<style>
  /* Base styles */
  #sidebar {
    will-change: transform, width;
  }

  /* Mobile styles - starts offscreen */
  @media (max-width: 767px) {
    #sidebar {
      transform: translateX(-100%);
    }
  }

  /* Desktop collapsed state */
  @media (min-width: 768px) {
    #sidebar.collapsed {
      width: 4rem;
    }

    #sidebar.collapsed #sidebar-title,
    #sidebar.collapsed #sidebar-search,
    #sidebar.collapsed .sidebar-text,
    #sidebar.collapsed .sidebar-toggle,
    #sidebar.collapsed .sidebar-submenu,
    #sidebar.collapsed .sidebar-title {
      opacity: 0;
      visibility: hidden;
    }
  }

  /* Visible sidebar elements */
  #sidebar #sidebar-title,
  #sidebar #sidebar-search,
  #sidebar .sidebar-text,
  #sidebar .sidebar-toggle,
  #sidebar .sidebar-submenu,
  #sidebar .sidebar-title {
    opacity: 1;
    visibility: visible;
  }

  /* Mobile open state */
  #sidebar.open {
    transform: translateX(0);
  }

  /* Active backdrop */
  #sidebar-backdrop.active {
    display: block;
    opacity: 1;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Get all relevant elements
    const sidebar = document.getElementById("sidebar");
    const backdrop = document.getElementById("sidebar-backdrop");
    const toggleButton = document.getElementById("toggle-sidebar");
    const closeButton = document.getElementById("close-sidebar");

    // Get all expandable section headers
    const expandableHeaders = document.querySelectorAll('[data-expandable="true"]');

    // Function to open sidebar on mobile
    function openMobileSidebar() {
      sidebar?.classList.add("open");
      backdrop?.classList.add("active");
      document.body.style.overflow = "hidden"; // Prevent scrolling when sidebar is open
    }

    // Function to close sidebar on mobile
    function closeMobileSidebar() {
      sidebar?.classList.remove("open");
      backdrop?.classList.remove("active");
      document.body.style.overflow = ""; // Restore scrolling
    }

    // Handle sidebar toggle (adapts based on screen size)
    toggleButton?.addEventListener("click", () => {
      if (window.innerWidth >= 768) {
        // Desktop behavior - just toggle collapsed state
        sidebar?.classList.toggle("collapsed");
        const isCollapsed = sidebar?.classList.contains("collapsed");
        localStorage.setItem("sidebarCollapsed", isCollapsed ? "true" : "false");
      } else {
        // Mobile behavior - open the sidebar like a sheet
        openMobileSidebar();
      }
    });

    // Close sidebar when backdrop is clicked
    backdrop?.addEventListener("click", closeMobileSidebar);

    // Close sidebar when close button is clicked
    closeButton?.addEventListener("click", closeMobileSidebar);

    // Add click handlers for expanding/collapsing sections
    expandableHeaders.forEach((header) => {
      header.addEventListener("click", (e) => {
        // Type safety for event target
        if (!e.target) return;

        // Convert event target to Element for TypeScript compatibility
        const target = e.target as Element;

        // If the click is on a link, let it navigate unless it's the parent category link
        const link = target.closest("a");
        const parent = header.parentElement;

        if (!parent) return;

        const isParentLink = link && link.parentElement === header;

        if (link && !isParentLink) {
          return;
        }

        // Prevent default navigation
        e.preventDefault();

        // Get the content section (next sibling after the header)
        const contentSection = parent.querySelector("div:nth-child(2)");
        if (!contentSection) return;

        // Toggle visibility
        const isHidden = contentSection.classList.contains("hidden");

        // Get the button and icon
        const button = header.querySelector("button");
        const icon = button?.querySelector("span");

        if (isHidden) {
          // Show the content
          contentSection.classList.remove("hidden");
          if (icon) {
            icon.textContent = "âˆ’";
          }
        } else {
          // Hide the content
          contentSection.classList.add("hidden");
          if (icon) {
            icon.textContent = "+";
          }
        }
      });
    });

    // Handle sidebar state persistence (desktop only)
    const sidebarState = localStorage.getItem("sidebarCollapsed");

    // Set initial state based on saved preference (desktop only)
    if (window.innerWidth >= 768 && sidebarState === "true") {
      sidebar?.classList.add("collapsed");
    }

    // Close sidebar when navigating to a new page on mobile
    const sidebarLinks = sidebar?.querySelectorAll("a");
    sidebarLinks?.forEach((link) => {
      link.addEventListener("click", () => {
        if (window.innerWidth < 768) {
          closeMobileSidebar();
        }
      });
    });

    // Handle resize events
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768) {
        // Reset mobile specific styles when returning to desktop
        sidebar?.classList.remove("open");
        backdrop?.classList.remove("active");
        document.body.style.overflow = "";

        // Apply desktop collapsed state if needed
        if (sidebarState === "true") {
          sidebar?.classList.add("collapsed");
        } else {
          sidebar?.classList.remove("collapsed");
        }
      } else {
        // Reset desktop specific styles when going to mobile
        sidebar?.classList.remove("collapsed");
      }
    });
  });
</script>
