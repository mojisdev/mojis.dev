---
import { Icon } from "astro-icon/components";
import { shortSha } from "virtual:build-meta/git";
import { API_URL } from "astro:env/client";

const navigation = [
  { name: "Getting Started", href: "#", expandable: true },
  {
    name: "Lucky?",
    icon: "lucide:clover",
    href: API_URL + "/lucky",
  },
  {
    name: "Building Your Application",
    href: "#",
    expandable: true,
    expanded: true,
    items: [
      { name: "Routing", href: "#" },
      { name: "Data Fetching", href: "#" },
      { name: "Rendering", href: "#" },
      { name: "Caching", href: "#" },
      { name: "Styling", href: "#" },
      { name: "Optimizing", href: "#" },
      { name: "Configuring", href: "#" },
      { name: "Testing", href: "#" },
      { name: "Authentication", href: "#" },
      { name: "Deploying", href: "#" },
      { name: "Upgrading", href: "#" },
      { name: "Examples", href: "#" },
    ],
  },
  {
    icon: "lucide:package",
    name: "API Reference",
    href: API_URL + "/scalar",
  },
];
---

<aside id="sidebar" class="bg-sidebar text-sidebar-foreground flex h-full flex-col transition-all duration-300 ease-in-out w-64">
  <div class="p-2 pb-2">
    <div class="flex items-center gap-2 py-3">
      <div class="size-8 bg-sidebar-primary rounded-md flex items-center justify-center text-sidebar-primary-foreground shrink-0">
        <Icon name="lucide:smile" class="size-5" />
      </div>
      <div class="transition-opacity duration-300 ease-in-out" id="sidebar-title">
        <h2 class="font-semibold text-sidebar-foreground">Mojis</h2>
        <p class="text-xs text-sidebar-foreground/60">{shortSha}</p>
      </div>
    </div>

    <div class="mt-4 relative transition-opacity duration-300 ease-in-out" id="sidebar-search">
      <div class="absolute inset-y-0 left-3 flex items-center pointer-events-none">
        <Icon name="lucide:search" class="w-4 h-4 text-sidebar-foreground/50" />
      </div>
      <input
        type="search"
        placeholder="Search the docs..."
        class="w-full bg-sidebar-accent/30 text-sidebar-foreground rounded-md pl-10 pr-3 py-2 text-sm border-none focus:outline-none focus:ring-1 focus:ring-sidebar-primary placeholder:text-sidebar-foreground/40"
      />
    </div>
  </div>

  <nav class="flex-1 p-4 pt-0 space-y-1 overflow-y-auto scrollbar-thin scrollbar-thumb-sidebar-border scrollbar-track-transparent">
    {
      navigation.map((item) => (
        <div class="py-1">
          <div
            class={`flex items-center justify-between rounded-md hover:bg-sidebar-accent/20 transition-colors duration-200 ${item.expandable ? "cursor-pointer" : ""}`}
            data-expandable={item.expandable}
          >
            <a href={item.href} class="flex-1 text-sidebar-foreground/80 hover:text-sidebar-foreground py-2 px-2 truncate transition-colors duration-200 flex items-center">
              {item.icon && <Icon name={item.icon} class="w-5 h-5 mr-3 inline-block flex-shrink-0" />}
              <span class="transition-opacity duration-300 ease-in-out sidebar-text">{item.name}</span>
            </a>
            {item.expandable && (
              <button class="w-6 h-6 items-center justify-center text-sidebar-foreground/60 hover:text-sidebar-foreground transition-colors duration-200 sidebar-toggle">
                <span class={`transform transition-transform duration-200 ${item.expanded ? "rotate-0" : "rotate-0"}`}>{item.expanded ? "−" : "+"}</span>
              </button>
            )}
          </div>

          {item.items && (
            <div class={`ml-3 pl-3 border-l border-sidebar-border mt-1 space-y-1 transition-all duration-200 ${!item.expanded && "hidden"} sidebar-submenu`}>
              {item.items.map((subItem) => (
                <a href={subItem.href} class="block py-2 px-2 text-sidebar-foreground/60 hover:text-sidebar-foreground hover:bg-sidebar-accent/20 rounded-md transition-colors duration-200 truncate">
                  <span class="transition-opacity duration-300 ease-in-out sidebar-text">{subItem.name}</span>
                </a>
              ))}
            </div>
          )}
        </div>
      ))
    }
  </nav>
</aside>

<style>
  #sidebar.collapsed {
    width: 4rem; /* 64px = 16rem */
  }

  #sidebar.collapsed #sidebar-title,
  #sidebar.collapsed #sidebar-search,
  #sidebar.collapsed .sidebar-text,
  #sidebar.collapsed .sidebar-toggle,
  #sidebar.collapsed .sidebar-submenu {
    opacity: 0;
    visibility: hidden;
  }

  #sidebar #sidebar-title,
  #sidebar #sidebar-search,
  #sidebar .sidebar-text,
  #sidebar .sidebar-toggle,
  #sidebar .sidebar-submenu {
    opacity: 1;
    visibility: visible;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Get all expandable section headers
    const expandableHeaders = document.querySelectorAll('[data-expandable="true"]');

    // Add click handlers for expanding/collapsing sections
    expandableHeaders.forEach((header) => {
      header.addEventListener("click", (e) => {
        // Type safety for event target
        if (!e.target) return;

        // Convert event target to Element for TypeScript compatibility
        const target = e.target as Element;

        // If the click is on a link, let it navigate unless it's the parent category link
        const link = target.closest("a");
        const parent = header.parentElement;

        if (!parent) return;

        const isParentLink = link && link.parentElement === header;

        if (link && !isParentLink) {
          return;
        }

        // Prevent default navigation
        e.preventDefault();

        // Get the content section (next sibling after the header)
        const contentSection = parent.querySelector("div:nth-child(2)");
        if (!contentSection) return;

        // Toggle visibility
        const isHidden = contentSection.classList.contains("hidden");

        // Get the button and icon
        const button = header.querySelector("button");
        const icon = button?.querySelector("span");

        if (isHidden) {
          // Show the content
          contentSection.classList.remove("hidden");
          if (icon) {
            icon.textContent = "−";
          }
        } else {
          // Hide the content
          contentSection.classList.add("hidden");
          if (icon) {
            icon.textContent = "+";
          }
        }
      });
    });

    // Handle sidebar state persistence
    const sidebar = document.getElementById("sidebar");
    const sidebarState = localStorage.getItem("sidebarCollapsed");

    // Set initial state based on saved preference
    if (sidebarState === "true") {
      sidebar?.classList.add("collapsed");
    }

    // Listen for toggle events from app-shell
    document.getElementById("toggle-sidebar")?.addEventListener("click", () => {
      const isCollapsed = sidebar?.classList.contains("collapsed");
      localStorage.setItem("sidebarCollapsed", isCollapsed ? "false" : "true");
    });
  });
</script>
